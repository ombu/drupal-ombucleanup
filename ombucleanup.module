<?php

/**
 * @file
 * Provides general Drupal modification for OMBU sites.
 */

/**
 * Implements hook_permission().
 */
function ombucleanup_permission() {
  return array(
    'use tinymce html button' => array(
      'title' => t('use tinymce html button'),
      'description' => t('Give access to the tinymce view html button.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ombucleanup_menu() {
  $items['ombucleanup_404'] = array(
    'title' => 'Page not found',
    'access callback' => TRUE,
    'page callback' => 'ombucleanup_404_page',
    'type' => MENU_CALLBACK,
  );

  $items['ombucleanup/cleanup-paste'] = array(
    'page callback' => 'ombucleanup_cleanup_paste',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function ombucleanup_menu_alter(&$items) {
  // Fix titles for user subpaths.
  $items['user/password']['title callback'] = 't';
  unset($items['user/password']['type']);
  $items['user/register']['title callback'] = 't';
  unset($items['user/register']['type']);

  unset($items['node/%node/track']);
  unset($items['user/%user/track/navigation']);

  // Hide taxonomy menu tabs for all users except uid 1.
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/edit']['access callback'] = 'ombucleanup_taxonomy_access';
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/fields']['access callback'] = 'ombucleanup_taxonomy_access';
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/display']['access callback'] = 'ombucleanup_taxonomy_access';

  // Remove the 'Configure Block' contextual link.
  if (isset($items['admin/structure/block/manage/%/%/configure'])) {
    unset($items['admin/structure/block/manage/%/%/configure']);
  }

  // Remove personal contact forms.
  if (module_exists('contact')) {
    $items['user/%user/contact']['access callback'] = FALSE;
  }

  // Disable view screen for beans.
  $items['block/%bean_delta/view']['access callback'] = FALSE;
}

/**
 * Implements hook_theme().
 */
function ombucleanup_theme() {
  return array(
    'ombucleanup_site_logo' => array(
      'variables' => array('site_name' => NULL),
    ),
  );
}

/**
 * Access callback for taxonomy menu items.
 *
 * Hide taxonomy menu tabs for all users except uid 1.
 */
function ombucleanup_taxonomy_access() {
  global $user;
  if ($user->uid == 1) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_block_info().
 */
function ombucleanup_block_info() {
  // Define site specific blocks here.
  $blocks = array();
  $blocks['site_logo'] = array(
    'info' => t('Site Logo'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['page_title'] = array(
    'info' => t('Page Title'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['breadcrumb'] = array(
    'info' => t('Breadcrumb'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ombucleanup_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'site_logo':
      $block['subject'] = '';
      $block['content'] = array(
        'site_logo' => array(
          '#theme' => 'ombucleanup_site_logo',
          '#site_name' => variable_get('site_name', 'Site Name'),
        ),
      );
      break;

    case 'page_title':
      $block['subject'] = '';
      $block['content'] = '';
      // Hide the title on the front page.
      // @todo: make this a setting, or at least more configurable.
      if (!drupal_is_front_page() && !variable_get('ombucleanup_hide_title', FALSE)) {
        $block['content'] = array(
          'title' => array(
            '#markup' => drupal_get_title(),
            '#prefix' => '<h1>',
            '#suffix' => '</h1>',
          ),
        );
      }
      break;

    case 'breadcrumb':
      $block['subject'] = '';
      $block['content'] = '';
      if ($breadcrumb = drupal_get_breadcrumb()) {
        $block['content'] = array(
          'breadcrumb' => array(
            '#markup' => theme('breadcrumb', array('breadcrumb' => drupal_get_breadcrumb())),
          ),
        );
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 */
function ombucleanup_block_view_system_main_alter(&$build, $block) {
  // Add node edit links when viewing a full node page.
  if (!path_is_admin(current_path()) && $node = menu_get_object()) {
    // Ensure that node links appear first.
    $build['content']['#contextual_links'] = array('node' => array('node', array($node->nid))) + $build['content']['#contextual_links'];
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ombucleanup_ctools_plugin_api($module, $api) {
  if ($module == 'context' && $api == 'plugins') {
    return array('version' => 3);
  }
}

/**
 * Implements hook_context_plugins().
 */
function ombucleanup_context_plugins() {
  $plugins = array();
  $plugins['context_condition_frontend'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'ombucleanup') . '/plugins',
      'file' => 'context_condition_frontend.inc',
      'class' => 'context_condition_frontend',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry().
 */
function ombucleanup_context_registry() {
  $registry = array();

  $registry['conditions'] = array(
    'frontend' => array(
      'title' => t('Front End Theme'),
      'description' => 'This condition triggers on pages themed with theme_default.',
      'plugin' => 'context_condition_frontend',
    ),
  );
  return $registry;
}

/**
 * Implements hook_context_page_reaction().
 */
function ombucleanup_context_page_condition() {
  global $theme;
  if ($plugin = context_get_plugin('condition', 'frontend')) {
    $plugin->execute($theme);
  }
}

/**
 * Implements hook_image_effect_info().
 *
 * New image effect to scale/crop with ability to select center point.
 */
function ombucleanup_image_effect_info() {
  $effects = array(
    'image_scale_and_crop_center' => array(
      'label' => t('Scale and crop - centering'),
      'help' => t('Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension with the ability to select center point.'),
      'effect callback' => 'ombucleanup_image_scale_and_crop_effect',
      'dimensions callback' => 'image_resize_dimensions',
      'form callback' => 'image_crop_form',
      'summary theme' => 'image_resize_summary',
    ),
  );

  return $effects;
}

/**
 * Image effect callback.
 */
function ombucleanup_image_scale_and_crop_effect(&$image, $data) {
  // Set sane default values.
  $data += array(
    'anchor' => 'center-top',
    'upscale' => TRUE,
  );

  // Figure out the correct aspect ratio to scale image to in order for the
  // cropping to result in a true sized crop. This means that in some cases the
  // height and the width will be greater than the dimensions expected for the
  // crop.
  $image_width = $image->info['width'];
  $image_height = $image->info['height'];
  $width = $data['width'];
  $height = $data['height'];

  $height_ratio = $height / $image_height;
  $width_ratio = $width / $image_width;

  $ratio = max($width_ratio, $height_ratio);

  $width = $image_width * $ratio;
  $height = $image_height * $ratio;

  if (image_resize($image, $width, $height)) {
    list($x, $y) = explode('-', $data['anchor']);
    $x = image_filter_keyword($x, $image->info['width'], $data['width']);
    $y = image_filter_keyword($y, $image->info['height'], $data['height']);

    return image_crop($image, $x, $y, $data['width'], $data['height']);
  }
  return FALSE;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ombucleanup_form_node_form_alter(&$form, &$form_state) {
  // Hide menu weight.
  if (isset($form['menu']) && $form['menu']['#access'] != FALSE) {
    $form['menu']['link']['weight']['#access'] = FALSE;
  }

  // Hide preview button.
  $form['actions']['preview']['#access'] = FALSE;

  // Block Revisions, "Promote to front page" and "sticky" options.
  $form['revision_information']['#access'] = FALSE;
  $form['options']['promote']['#access'] = FALSE;
  $form['options']['sticky']['#access'] = FALSE;

  // Don't check pathauto by default.
  if (!empty($form['nid']['#value'])) {
    $form['path']['pathauto']['#default_value'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ombucleanup_form_user_profile_form_alter(&$form, $form_state) {
  // Hide Admin overlay setting.
  $form['overlay_control']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ombucleanup_form_menu_edit_item_alter(&$form, $form_state) {
  // If special_menu_items is enabled, add extra help text to description.
  if (module_exists('special_menu_items')) {
    $form['link_title']['#description'] .= '  ' . t('If creating a seprator menu item (using <em>&lt;separator&gt;</em> as the path), it is recommended to use <em>"&lt;separator&gt;"</em> as the title.');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Clean up media embed help text.
 */
function ombucleanup_form_media_internet_add_alter(&$form, $form_state) {
  $form['embed_code']['#title'] = variable_get('media_embed_help', 'Enter an image URL or a YouTube share link');
  $form['embed_code']['#description'] = '';
  $form['providers']['#access'] = FALSE;
}

/**
 * Implements hook_form_alter().
 */
function ombucleanup_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {

    case 'search_block_form':
      unset($form['search_block_form']['#title']);
      break;

    case 'search_form':
      if ($form['module']['#value'] == 'node') {
        // Hide advanced form elements on node search.
        if (isset($form['advanced'])) {
          $form['advanced']['#access'] = FALSE;
        }
      }
      break;

    case 'user_profile_form':
    case 'user_admin_settings':
      if (isset($form['contact'])) {
        $form['contact']['#access'] = FALSE;
      }
      break;
  }
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function ombucleanup_wysiwyg_editor_settings_alter(&$settings, &$context) {
  if ($context['profile']->editor == 'ckeditor') {
    // Trigger content class.
    $settings['body_class'] = 'c';

    // Remove paste plugins in favor of ombucleanup.
    $settings['entities'] = 'false';

    // Allow all content in wysiwyg.
    $settings['allowedContent'] = TRUE;
  }
}

/**
 * Implements hook_wysiwyg_plugin().
 */
function ombucleanup_wysiwyg_plugin($editor, $version) {
  if ($editor == 'ckeditor') {
    return array(
      'ombucleanup' => array(
        'path' => drupal_get_path('module', 'ombucleanup') . '/js',
        'file' => 'plugin.js',
        'extensions' => array(
          'ombucleanup' => t('OMBU Cleanup'),
        ),
        'load' => TRUE,
      ),
    );
  }
}

/**
 * Menu Callback to clean up CKEditor paste.
 */
function ombucleanup_cleanup_paste() {
  $output = array();

  // $format = $_POST['format'];
  $format = 'default';

  if (user_access('use text format ' . $format)) {
    $html = $_POST['html'];

    // There's an apparent bug in CKEditor where all HTML entities are encoded
    // on paste.  Convert decoded HTML entities before processing.
    $html = html_entity_decode($html);

    $output = array(
      'text' => check_markup($html, $format),
    );
  }

  drupal_json_output($output);
  exit;
}

/**
 * Implements hook_block_view_alter().
 *
 * Remove contextual links for menu blocks.
 */
function ombucleanup_block_view_alter(&$data, $block) {
  if (isset($data['content']['#contextual_links']['menu'])) {
    unset($data['content']['#contextual_links']['menu']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ombucleanup_form_bean_form_alter(&$form, $form_state) {
  // Hide the label, fill with a value if needed so form validates.
  $form['label']['#access'] = FALSE;
  if (!$form['label']['#default_value']) {
    $form['label']['#default_value'] = 'ombucleanup-tempkey';
  }

  // Hide revision info.
  $form['revision']['#access'] = FALSE;

  // Hide redirects, if module exists.
  if (module_exists('redirect')) {
    $form['redirect']['#access'] = FALSE;
  }
}

/**
 * Implements hook_entity_presave().
 */
function ombucleanup_entity_presave($entity, $type) {
  // For bean entities, generate a label.
  if ($type == 'bean') {
    if ($entity->label == 'ombucleanup-tempkey') {
      // Default to use title as label, otherwise use bean type.
      $entity->label = $entity->title ? $entity->title : $entity->type;

      // Create a truly unique delta for new beans. Bean::add() has the
      // possibility of generating deltas that existed in beans that have been
      // previously deleted. This causes problems, especially when a bean has
      // been deleted but not removed from other systems (e.g. context), causing
      // the bean to show up in unintended places.
      $entity->delta = drupal_clean_css_identifier(strtolower($entity->label));

      // Make sure it isn't too long for the database.
      $max_length = 32;
      $identifier = '-' . db_next_id();
      $max_length -= strlen($identifier);
      $entity->delta = substr($entity->delta, 0, $max_length);
      $entity->delta .= $identifier;
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function ombucleanup_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'library_alter' && module_exists('jquery_update')) {
    // Move jquery update to the end. This will make sure our hook_library_alter
    // is always called before the jquery_update.
    $jquery_update = $implementations['jquery_update'];
    unset($implementations['jquery_update']);
    $implementations['jquery_update'] = $jquery_update;
  }
}

/**
 * Implements hook_library_alter().
 */
function ombucleanup_library_alter(&$libraries, $module) {
  // Remove patches jquery ui dialog from views, since we're using a current
  // version.
  if (isset($libraries['ui.dialog']['js'][drupal_get_path('module', 'views') . '/js/jquery.ui.dialog.patch.js'])) {
    unset($libraries['ui.dialog']['js'][drupal_get_path('module', 'views') . '/js/jquery.ui.dialog.patch.js']);
  }
}

/**
 * Implements hook_media_token_to_markup_alter().
 *
 * Change height/width to max-* and add classes for positioning.
 */
function ombucleanup_media_token_to_markup_alter(&$element, $tag_info, $settings) {
  if (isset($element['content']['file']) && isset($element['content']['file']['#theme']) && in_array($element['content']['file']['#theme'], array('image', 'image_formatter'))) {
    $style = '';
    $content =& $element['content']['file'];

    $classes = $content['#attributes']['class'];

    if (isset($content['#attributes']['style']) && preg_match('/float: ?(\w*);/', $content['#attributes']['style'], $matches)) {
      $classes[] = $matches[1] == 'left' ? 'pull-left' : 'pull-right';
    }

    if (isset($content['#attributes']['style']) && preg_match('/width: ?(\d*)px; height: ?(\d*)px;/', $content['#attributes']['style'], $matches)) {
      $style .= 'max-width: ' . $matches[1] . 'px; ';
      $style .= 'max-height: ' . $matches[2] . 'px;';
    }
    elseif (isset($content['#attributes']['style']) && preg_match('/height: ?(\d*)px; width: ?(\d*)px;/', $content['#attributes']['style'], $matches)) {
      $style .= 'max-width: ' . $matches[2] . 'px; ';
      $style .= 'max-height: ' . $matches[1] . 'px;';
    }
    elseif (isset($content['#attributes']['width']) && isset($content['#attributes']['height'])) {
      $style .= 'max-width: ' . $content['#attributes']['width'] . 'px; ';
      $style .= 'max-height: ' . $content['#attributes']['height'] . 'px;';
    }

    $content['#attributes'] = array(
      'style' => $style,
      'class' => $classes,
    );

    unset($content['#width']);
    unset($content['#height']);

    if ($content['#theme'] == 'image_formatter') {
      $content['#item']['attributes'] = $content['#attributes'];
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function ombucleanup_page_alter(&$page) {
  // Add js to open links in new windows, only on the front end.
  if (variable_get('external_new_window', 1) && !path_is_admin(current_path())) {
    drupal_add_js(drupal_get_path('module', 'ombucleanup') . '/js/drupal.external-links.js');
  }
  // Add js to disable submit buttons during ajax requests.
  if (current_path() != 'media/browser') {
    drupal_add_js(drupal_get_path('module', 'ombucleanup') . '/js/drupal.disable-ajax.js', array('weight' => 100));
  }

  if (path_is_admin(current_path())) {
    drupal_add_js(drupal_get_path('module', 'ombucleanup') . '/js/fix-mediaStyleSelector.js', array('weight' => 100));
  }

  // Add CSS to override admin UI styles.
  drupal_add_css(drupal_get_path('module', 'ombucleanup') . '/css/admin.overrides.css');
}

/**
 * Implements hook_siteconfig().
 */
function ombucleanup_siteconfig($op, $form) {
  if ($op == 'form') {
    $form['baseinfo']['external_new_window'] = array(
      '#title' => t('Open External Links in New Window'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('external_new_window', 1),
      '#description' => 'If checked, all external links will automatically be opened in a new window.',
    );

    return $form;
  }
}

/**
 * Implements hook_oembed_response_alter().
 *
 * Alter oembed response so thumbnails are more reasonably sized.
 */
function ombucleanup_oembed_response_alter(&$embed) {
  if (isset($embed['thumbnail_width'])) {
    if (!isset($embed['thumbnail_height'])) {
      return;
    }
    $width = (int) $embed['thumbnail_width'];
    $height = (int) $embed['thumbnail_height'];
    $ratio = 100 / $width;
    $embed['thumbnail_width'] = 100;
    $embed['thumbnail_height'] = $height * $ratio;
  }
}

/**
 * Implements hook_node_view_alter().
 */
function ombucleanup_node_view_alter(&$build) {
  // Remove contextual links for nodes.
  if (variable_get('hide_node_contextual_links', FALSE)) {
    unset($build['#contextual_links']['node']);
  }

  // Hide social links for nodes/view modes that haven't been whitelisted in
  // social_links_whitelist variable.
  // @todo: add an admin UI for controlling which node type/view mode social
  // links should be shown.
  if (isset($build['social_links'])) {
    $whitelist = variable_get('social_links_whitelist', array());
    if (!in_array($build['#bundle'] . ':' . $build['#view_mode'], $whitelist)) {
      $build['social_links']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function ombucleanup_menu_breadcrumb_alter(&$active_trail, $item) {
  if (variable_get('ombucleanup_breadcrumb_hide_special_menu_items', 1)) {
    foreach ($active_trail as $key => $trail) {
      if (isset($trail['link_path']) && ($trail['link_path'] == '<nolink>' || $trail['link_path'] == '<separator>')) {
        unset($active_trail[$key]);
      }
    }
  }
}

/**
 * 404 page callback.
 */
function ombucleanup_404_page() {
  drupal_set_title(t('Page not found'));
  return t('The requested page could not be found.');
}

/**
 * Default implementation for site logo block theme function.
 */
function theme_ombucleanup_site_logo($variables) {
  return l($variables['site_name'], '<front>', array(
    'attributes' => array(
      'class' => array('brand'),
    ),
  ));
}
