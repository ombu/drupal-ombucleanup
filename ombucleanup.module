<?php
/***********************************************************************************
*   Module Hooks
***********************************************************************************/

function ombucleanup_perm() {
    return array(
        'use tinymce html button'
    );
}

/**
 * Implementation of hook_views_api()
 */
function ombucleanup_views_api() {
    return array('api' => 2);
}

function ombucleanup_form_alter(&$form, $form_state, $form_id) {

	// This is a node form
	if ($form['#id'] == 'node-form') {

		/* --- Node settings --- */

            $s = array(
                // Ex:
                // 'partner' => array(
                //    'hide' => array('revision_information', 'author', 'xmlsitemap', 'menu', 'path', 'attachments', 'field_weight'),
                //    'redirect' => 'admin/dashboard/manage-content/partners',
                // ),
            );

			// Only show menu items from this menu
			$menu = 'menu-site-nav';
		/*------------------------- */

		// Hide these elements from all node forms
		if (isset($s[$form['type']['#value']]) && isset($s[$form['type']['#value']]['hide'])) {
            foreach ($s[$form['type']['#value']]['hide'] as $h) {
                _ombucleanup_hide($form, $h);
            }
        }

        // Set redirect
        if (isset($s[$form['type']['#value']]) && isset($s[$form['type']['#value']]['redirect'])) {
            $form['#redirect'] = $s[$form['type']['#value']]['redirect'];
        }

		// Only show menu items from the main menu
		if ( $form['menu'] && $form['menu']['#access'] != FALSE && $form['menu']['parent'] ) {
			foreach( $form['menu']['parent']['#options'] as $opt => $val ) {
				if ( strpos($opt, $menu) === FALSE ) {
					unset( $form['menu']['parent']['#options'][$opt] );
				}
			}

			// if it's a new node
			if ( !$form['#node']->nid ) {
				$form['menu']['#collapsed'] = FALSE;
			} else {
				$form['menu']['#collapsed'] = TRUE;
				unset( $form['menu']['delete'] );
			}

			// Hide weight
			$form['menu']['weight']['#access'] = FALSE;
		}

        if ($form['path']['#access'] != FALSE) {
            $form['path']['#collapsed'] = TRUE;
            $form['path']['#pre_render'][] = 'ombucleanup_set_automatic_alias';
            $form['path']['#description'] = "Only uncheck the box if this content doesn't have a menu link defined above.";
        }

 		// Hide the 'include teaser in body' checkbox
 		$form['body_field']['teaser_include']['#access'] = FALSE;

        // Block Revisions, "Promote to front page" and "sticky" options
        $form['revision_information']['#access'] = FALSE;
        $form['options']['promote']['#access'] = FALSE;
        $form['options']['sticky']['#access'] = FALSE;

		// Remove the 'Preview' button
		unset( $form['buttons']['preview'] );

        // Add Node class to form
        $form['#attributes']['class'] = 'node-'. $form['type']['#value'];
	}

	switch( $form_id ) {

		case 'search_block_form':
			unset($form['search_block_form']['#title']);
			$form['search_block_form']['#default_value'] = 'Search';
			break;

		case 'search_form':

			if ( $form['module']['#value'] == 'node' ) {

				if ( $form['advanced'] ) {

					unset( $form['advanced'] );
				}
			}
			break;

        case 'image_node_form':
            foreach (array('body_field', 'revision_information', 'author', 'options', 'comment_settings', 'menu', 'path', 'attachments', 'xmlsitemap') as $el_name) {
                $form[$el_name]['#access'] = FALSE;
            }
            break;

        case 'img_assist_properties_form':
            unset($form['insertmode']['#options']['html']);
            $form['properties'][] = array('#value' => '<div class="field-label"><strong>Resizing:</strong></div><div class="field-items" style="line-height: 1.1em;">Images can be <br />drag-resized after <br />being placed.</div>');
            $form['align']['#default_value'] = 'center';
            $form['insertmode']['#default_value'] = 'filtertag';
            $form['buttons']['cancel']['#type'] = 'submit';
            $form['buttons']['cancel']['#button_type'] = 'submit';
            $form['buttons']['cancel']['#attributes']['style'] = '';
            global $user;
            if ($user->uid != 1) {
                $form['title']['#prefix'] = '<div style="display: none;">';
                $form['title']['#suffix'] = '</div>';
                $form['insertmode']['#prefix'] = '<div style="display: none;">';
                $form['insertmode']['#suffix'] = '</div>';
            }
            break;

        case 'img_assist_header_form':
            // Browse header form
            if (isset($form['browse'])) {
                $form['browse'] = array(
                    '#type' => 'markup',
                    '#value' => 'Select an image',
                );
                if ($form[1]['#value'] == '<strong>Browse Images: </strong>') {
                    $form[1]['#value'] = '';
                }
            }
            break;

		default: break;
	}
}

function _ombucleanup_hide(&$form, $elem) {

    if(!$form[$elem]) return false;

	global $user;

	// Only block access if user isn't superuser
	if ( $user->uid != 1 ) {
		$form[$elem]['#access'] = FALSE;
		return TRUE;
	}
	else {
	    return TRUE;
	}
}

function ombucleanup_set_automatic_alias(&$element) {
    $element['pathauto_perform_alias']['#value'] = TRUE;
    return $element;
}

function ombucleanup_wysiwyg_editor_settings_alter(&$settings, &$context)  {
    if ( user_access('use tinymce html button') ) {
        $settings['theme_advanced_buttons1'] .= ',code';
    }

    // Cleanup paste with HTMLPurifier
    $settings['paste_preprocess'] = 'Drupal.cleanupPaste';
    $settings['plugins'] .= ',paste';
    $settings['paste_auto_cleanup_on_paste'] = 1;

    // Trigger content class in TinyMCE
    $settings['body_class'] = 'c';
}

function ombucleanup_init() {
    if (arg(0) == 'img_assist') {
        drupal_add_css(drupal_get_path('module', 'ombucleanup'). '/css/img_assist_cleanup.css');
    }

    drupal_add_js(drupal_get_path('module', 'ombucleanup').'/js/ombucleanup.js', 'module' );
}


/**
 * Implementation of hook_menu()
 */
function ombucleanup_menu() {
    $items['ombucleanup/cleanup-paste'] = array(
        'page callback' => 'ombucleanup_cleanup_paste',
        'access callback' => TRUE,
    );
    return $items;
}


/**
 * Menu Callback to clean up TinyMCE paste
 */
function ombucleanup_cleanup_paste() {
    $text = $_REQUEST['text'];

    _htmlpurifier_load();
    $config = _htmlpurifier_get_config(NULL);
    $config->set('HTML.Allowed', 'p,strong,b,em,i,ul,ol,li,h2,h3,h4');
    $config->set('Output.Newline', ' ');
    $purifier = new HTMLPurifier($config);
    $cleaned_text = $purifier->purify($text);

    echo $cleaned_text; exit;
}

function ombucleanup_menu_alter(&$items) {
    $items['user']['title'] = 'Log into ' . variable_get('site_name', 'this site');

    unset($items['node/%node/track']);
    unset($items['user/%user/track/navigation']);
}


/**
 * Preprocess img_assist_browser_thumbnail to add the title below the image
 */
function ombucleanup_preprocess_img_assist_browser_thumbnail(&$vars) {
    $vars['thumbnail'] .= '<span class="title">'. $vars['title'] .'</span>';
}
