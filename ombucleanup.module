<?php
// $Id$

/**
 * @file
 *
 * Provides general Drupal modification for OMBU sites.
 */

/**
 * Implements hook_init().
 */
function ombucleanup_init() {
  drupal_add_js(drupal_get_path('module', 'ombucleanup') . '/js/ombucleanup.js');
}

/**
 * Implements hook_permission().
 */
function ombucleanup_permission() {
  return array(
    'use tinymce html button' => array(
      'title' => t('use tinymce html button'),
      'description' => t('Give access to the tinymce view html button.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ombucleanup_menu() {
  $items['ombucleanup/cleanup-paste'] = array(
    'page callback' => 'ombucleanup_cleanup_paste',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function ombucleanup_menu_alter(&$items) {
  // $items['user']['title'] = 'Log into ' . variable_get('site_name', 'this site');

  // Fix titles for user subpaths.
  $items['user/password']['title callback'] = 't';
  unset($items['user/password']['type']);
  $items['user/register']['title callback'] = 't';
  unset($items['user/register']['type']);

  unset($items['node/%node/track']);
  unset($items['user/%user/track/navigation']);

  // Hide taxonomy menu tabs for all users except uid 1.
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/edit']['access callback'] = 'ombucleanup_taxonomy_access';
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/fields']['access callback'] = 'ombucleanup_taxonomy_access';
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/display']['access callback'] = 'ombucleanup_taxonomy_access';

  // Remove the 'Configure Block' contextual link.
  if (isset($items['admin/structure/block/manage/%/%/configure'])) {
    unset($items['admin/structure/block/manage/%/%/configure']);
  }

  // Remove personal contact forms.
  if (module_exists('contact')) {
    $items['user/%user/contact']['access callback'] = FALSE;
  }
}

/**
 * Access callback for taxonomy menu items.
 *
 * Hide taxonomy menu tabs for all users except uid 1.
 */
function ombucleanup_taxonomy_access() {
  global $user;
  if ($user->uid == 1) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ombucleanup_form_node_form_alter(&$form, &$form_state) {
  /* --- Node settings --- */

  /**
   * Hiding the menu and only showing specific menus is done via the content
   * type settings, specifically the menu_options_$node_type variable.  You can
   * hide the menu form by settings that variable to an empty array.
   */
  $s = array(
    // Ex:
    // 'partner' => array(
    //    'hide' => array('revision_information', 'author', 'xmlsitemap', 'path', 'attachments', 'field_weight'),
    //    'redirect' => 'admin/dashboard/manage-content/partners',
    // ),
  );

  // Hide these elements from all node forms
  if (isset($s[$form['type']['#value']]) && isset($s[$form['type']['#value']]['hide'])) {
    foreach ($s[$form['type']['#value']]['hide'] as $h) {
      _ombucleanup_hide($form, $h);
    }
  }

  // Set redirect
  if (isset($s[$form['type']['#value']]) && isset($s[$form['type']['#value']]['redirect'])) {
    $form_state['#redirect'] = $s[$form['type']['#value']]['redirect'];
  }

  // Hide menu weight
  if ( isset($form['menu']) && $form['menu']['#access'] != FALSE) {
    $form['menu']['link']['weight']['#access'] = FALSE;
  }

  // Force automatic updating of path alias.
  if (module_exists('pathauto') && $form['path']['#access'] != FALSE) {
    //$form['path']['#pre_render'][] = 'ombucleanup_set_automatic_alias';
    // @todo: it seems like this is always forced checked (see
    // ombucleanup_set_automatic_alias), so the description doesn't make sense.
    //$form['path']['#description'] = "Only uncheck the box if this content doesn't have a menu link defined above.";
  }

  // Block Revisions, "Promote to front page" and "sticky" options
  $form['revision_information']['#access'] = FALSE;
  $form['options']['promote']['#access'] = FALSE;
  $form['options']['sticky']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ombucleanup_form_user_profile_form_alter(&$form, $form_state) {
  // Hide Admin overlay setting.
  $form['overlay_control']['#access'] = FALSE;
}

/**
 * Implements hook_form_alter().
 */
function ombucleanup_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {

    case 'search_block_form':
      unset($form['search_block_form']['#title']);
      $form['search_block_form']['#default_value'] = 'Search';
      break;

    case 'search_form':
      if ( $form['module']['#value'] == 'node' ) {
        // Hide advanced form elements on node search.
        if ( isset($form['advanced']) ) {
          $form['advanced']['#access'] = FALSE;
        }
      }
      break;

    case 'user_profile_form':
    case 'user_admin_settings':
      if (isset($form['contact'])) {
        $form['contact']['#access'] = FALSE;
      }
      break;
  }
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function ombucleanup_wysiwyg_editor_settings_alter(&$settings, &$context) {
  if ($context['profile']->editor == 'tinymce') {
    if (user_access('use tinymce html button')) {
      $settings['theme_advanced_buttons1'] .= ',code';
    }

    // Cleanup paste with HTMLPurifier
    $settings['paste_preprocess'] = 'Drupal.cleanupPaste';
    $settings['plugins'] .= ',paste';
    $settings['paste_auto_cleanup_on_paste'] = 1;

    // Trigger content class in TinyMCE
    $settings['body_class'] = 'c';
  }
}

/**
 * Hide a specific form element for all users other than the superuser.
 */
function _ombucleanup_hide(&$form, $elem) {

  if (!$form[$elem]) {
    return FALSE;
  }

  global $user;

  // Only block access if user isn't superuser
  if ( $user->uid != 1 ) {
    $form[$elem]['#access'] = FALSE;
    return TRUE;
  }
  else {
    return TRUE;
  }
}

/**
 * Force updating of pathauto alias.
 */
function ombucleanup_set_automatic_alias(&$element) {
  $element['pathauto_perform_alias']['#value'] = TRUE;
  return $element;
}

/**
 * Menu Callback to clean up TinyMCE paste
 */
function ombucleanup_cleanup_paste() {
  $text = $_REQUEST['text'];

  module_load_include('inc', 'ombucleanup', 'htmlpurifier/htmlpurifier');
  _ombucleanup_htmlpurifier_load();
  $config = _ombucleanup_htmlpurifier_get_config(NULL);
  // @todo: pull in the tags allowed in ombu_input
  $config->set('HTML.Allowed', 'p,strong,b,em,i,ul,ol,li,h2,h3,h4,br');
  $purifier = new HTMLPurifier($config);
  $cleaned_text = $purifier->purify($text);

  echo $cleaned_text;
  exit;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ombucleanup_form_bean_form_alter(&$form, $form_state) {
  // Hide the label, fill with a value if needed so form validates.
  $form['label']['#access'] = FALSE;
  if (!$form['label']['#default_value']) {
    $form['label']['#default_value'] = 'ombucleanup-tempkey';
  }
}

/**
 * Implements hook_entity_presave().
 */
function ombucleanup_entity_presave($entity, $type) {
  // For bean entities, generate a label.
  if ($type == 'bean') {
    if ($entity->label == 'ombucleanup-tempkey') {
      // Default to use title as label, otherwise use bean type.
      $entity->label = $entity->title ? $entity->title : $entity->type;

      // Check if label is in use, borrowed from Bean:save().
      $max_length = 32;
      // Base it on the label and make sure it isn't too long for the database
      $entity->delta = drupal_clean_css_identifier(strtolower($entity->label));
      $entity->delta = substr($entity->delta, 0, $max_length);

      // Check if delta is unique
      if (bean_load_delta($entity->delta)) {
        $i = 0;
        $separator = '-';
        $original_delta = $entity->delta;
        do {
          $unique_suffix = $separator . $i++;
          $entity->delta = substr($original_delta, 0, $max_length - drupal_strlen($unique_suffix)) . $unique_suffix;
        } while (bean_load_delta($entity->delta));
      }
    }
  }
}

/**
 * Implements hook_workbench_access_user().
 *
 * Alter user access to grant all access to users with bypass node access
 * permission, in order for the sections to show up on the forms.
 */
function ombucleanup_workbench_access_user_alter(&$access, $account) {
  if (user_access('bypass node access', $account)) {
    $result = db_query("SELECT access_id FROM {workbench_access}");
    foreach ($result as $item) {
      $access[$item->access_id] = array(
        'view' => array('all'),
        'create' => array('all'),
        'update' => array('all'),
        'delete' => array('all'),
        'preview' => array('all'),
        'revise' => array('all'),
        'publish' => array('all'),
      );
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function ombucleanup_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'library_alter' && module_exists('jquery_update')) {
    // Move jquery update to the end. This will make sure our hook_library_alter
    // is always called before the jquery_update.
    $jquery_update = $implementations['jquery_update'];
    unset($implementations['jquery_update']);
    $implementations['jquery_update'] = $jquery_update;
  }
}

/**
 * Implements hook_library_alter().
 */
function ombucleanup_library_alter(&$libraries, $module) {
  // If it is an admin path all we want to do is change the global $conf
  // variable so when jquery_update runs right after us it will use 1.5.
  if (path_is_admin(current_path()) && module_exists('jquery_update')) {
    global $conf;
    $conf['jquery_update_jquery_version'] = '1.5';
  }
}

/**
 * Implements hook_media_token_to_markup_alter().
 *
 * Change height/width to max-* and add classes for positioning.
 */
function ombucleanup_media_token_to_markup_alter(&$element, $tag_info, $settings) {
  if ($element['content']['file']['#theme'] == 'image') {
    $content =& $element['content']['file'];

    $classes = $content['#attributes']['class'];
    if (preg_match('/float: (\w*);/', $content['#attributes']['style'], $matches)) {
      $classes[] = $matches[1];
    }

    $style = 'max-width: ' . $content['#attributes']['width'] . '; ';
    $style .= 'max-height: ' . $content['#attributes']['height'] . ';';

    $content['#attributes'] = array(
      'style' => $style,
      'class' => $classes,
    );

    unset($content['#width']);
    unset($content['#height']);
  }
}
